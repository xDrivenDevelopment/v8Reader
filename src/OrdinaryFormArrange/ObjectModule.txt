Перем ИмяОбрабатываемогоФайла;//используется в СохранитьТекстВФайл
Перем ПаттернГуида;

Процедура ПостОбработка(Каталог) Экспорт
	
	//TODO отталкиваться от текущего имени файла, и весь код перекинуть туда
	
	УпорядочитьФайлВерсий(Каталог);	
	
	//ищем в папке Form и в папке und
	ФайлыФорм = НайтиФайлы(Каталог+"Form\","form",Истина);
	
	Для Каждого Файл Из ФайлыФорм Цикл
		ТекстФормы = Новый ТекстовыйДокумент;
		ТекстФормы.Прочитать(Файл.ПолноеИмя);
//		ТекстФормы.Записать(Файл.ПолноеИмя+".original");
		_Текст = ТекстФормы.ПолучитьТекст();
		
		//это не нужно, оставлю для памяти, вдруг еще какая мысль появится
		_Текст3 = "{""#"",5c83cba4-7a20-4102-a5be-add0ee74f6a1,"+Символы.ПС+_Текст+Символы.ПС+"}";
		Форма= ЗначениеИзСтрокиВнутр(_Текст3);
		_Текст2 = ЗначениеВСтрокуВнутр(Форма);
		
		ОбработатьФайлФормы(Файл.ПолноеИмя);
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура УпорядочитьФайлВерсий(Каталог)
	
	//1. Поищем файл versions в und и убьем в нем GUIDы в четных строках, начиная с 4. Для этого сначала разложим на строки.
	ТекстVersions = Новый ТекстовыйДокумент;
	ТекстVersions.Прочитать(Каталог+"und\versions");
	ИсходныйТекст = ТекстVersions.ПолучитьТекст();
	ИсходныйТекст = СтрЗаменить(ИсходныйТекст,",",","+Символы.ПС);
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("Имя");
	
	Для Сч=1 По СтрЧислоСтрок(ИсходныйТекст) Цикл
		
		Если Сч%2<>0 и Сч>2 Тогда//а первые 2 строки копируем как есть
			Нов = ТаблицаФайлов.Добавить();
			Нов.Имя = СтрПолучитьСтроку(ИсходныйТекст,Сч);
		КонецЕсли;	
		
	КонецЦикла;
	
	ТаблицаФайлов.Сортировать("Имя");
	
	НовТекст = СтрПолучитьСтроку(ИсходныйТекст,1)+Символы.ПС+СтрПолучитьСтроку(ИсходныйТекст,2);//первые 2 строки остаются без изменений
	НовТекст = Лев(НовТекст,СтрДлина(НовТекст)-1);//обрежем последнюю запятую
	
	Для Каждого Стр Из ТаблицаФайлов Цикл
		//1с не важны пробелы, переносы строи и табы в этом файле, так что можем бесчинствовать.
		НовТекст = НовТекст+",
		|"+Стр.Имя+"
		|"+"00000000-0000-0000-0000-000000000000";//обнулим GUID
	КонецЦикла;	
	
	НовТекст = НовТекст+"
	|}";
	
	ТекстVersions.УстановитьТекст(НовТекст);
	ТекстVersions.Записать(Каталог+"\und\versions");//пока сброшу
	
КонецПроцедуры	

//основная точка входа
Процедура ОбработатьФайлФормы(ИмяФайлаФормы) Экспорт
	
	ИмяОбрабатываемогоФайла = ИмяФайлаФормы;
	
	ТД = Новый ТекстовыйДокумент;
	ТД.Прочитать(ИмяФайлаФормы);
	ИсходныйТекст = ТД.ПолучитьТекст();
	
	//СохранитьТекстВФайл(ИсходныйТекст,".original");//бэкап
	
	
	Текст = ИсходныйТекст;
	
	//СохранитьТекстВФайл(ВыровнятьТекстыФорм(Текст),".Форматирован");//отладка : +100 к читабельности
	
	Текст = УбратьПовторныеКавычки(Текст);//
	
	
	//1. Уберем текст внутри кавычек, чтоб не мешался.
	ВыражениеПоискаТекстаВКавычках = """.*?""";//кавычка,текст,кавычка. Не жадное.
	РезультатЗаменыКавычек = ЗаменитьТекстПоВыражению(Текст,ВыражениеПоискаТекстаВКавычках,"plainText");//меняем на текст вида <plaintext00000023>
	Текст = РезультатЗаменыКавычек.НовыйТекст;
	ТаблицаЗаменКавычек = РезультатЗаменыКавычек.ТаблицаЗамен;
	
	
	//СохранитьТекстВФайл(Текст,".ПередПоискомЛистовКнопок");
	

	//60b2b5c2-3583-49d4-8af3-b4eb71132c92,#%{8,<plainText00000004>,0,1,#%{1,0},0,72082f8c-4626-4c39-923a-e03ce8a48322	
	ВыражениеПоискаСпискаКнопок=ПаттернГуида+",#%{8,\<plainText(\d){8}.*?,\d,"+ПаттернГуида;
	
	РезультатЗаменыСпискаКнопок = ЗаменитьТекстПоВыражению(Текст,ВыражениеПоискаСпискаКнопок,"listOfButtons");
	Текст = РезультатЗаменыСпискаКнопок.НовыйТекст;
	
	//в РезультатЗаменыСпискаКнопок.ТаблицаЗамен потом найдем все гуиды кнопок командных панелей в порядке появления в форме.
	//затем в таком же порядке надо будет расставить сами описания кнопок.
	ТаблицаПорядкаКнопок = РезультатЗаменыСпискаКнопок.ТаблицаЗамен;
	ТаблицаПорядкаКнопок.Колонки.Добавить("ГУИДКнопки");
	ТаблицаПорядкаКнопок.Колонки.Добавить("ИсходникПолностью");
	Для Каждого Стр Из ТаблицаПорядкаКнопок Цикл
		Стр.ГУИДКнопки = Стр.СовпаденияИзРегэкспа[0];
		Стр.ИсходникПолностью = ВосстановитьЗаменыТекста(Стр.ИсходныйТекст,ТаблицаЗаменКавычек);
	КонецЦикла;	
		
	//СохранитьТекстВФайл(Текст,".Перетасовка_До");
	
	ВыражениеПоискаОписанияКнопок="\{6,"+ПаттернГуида+",\d,"+ПаттернГуида+","+".*?\}";
	//теперь от начала каждого совпадения надо найти вплоть до закрывающей скобки
	
//	рекурсивныйрегэкс для поиска текста внутри скобок

//				\(([^)(]++|(?R))++\)					//ищет только внутри круглых скобок
//				\{([^}{]++|(?R))++\}					//для фигурных. И не работает в VBS.
//				Стырено здесь: http://habrahabr.ru/post/56765/	
	
	РезультатЗаменыОписанияКнопок = ЗаменитьТекстПоВыражению(Текст,ВыражениеПоискаОписанияКнопок,"buttonElement",Истина);
	Текст = РезультатЗаменыОписанияКнопок.НовыйТекст;
	//и у них тоже гуиды поймем
	ТаблицаОписанийКнопок = РезультатЗаменыОписанияКнопок.ТаблицаЗамен;
	ТаблицаОписанийКнопок.Колонки.Добавить("ГУИДКнопки");
	Для Каждого Стр Из ТаблицаОписанийКнопок Цикл
		Стр.ГУИДКнопки = Стр.СовпаденияИзРегэкспа[0];
	КонецЦикла;	
	
	ТаблицаОписанийКнопок.Колонки.Добавить("Порядок");
	Для Каждого Стр Из ТаблицаОписанийКнопок Цикл
		СтрокаОписанияКнопки = ТаблицаПорядкаКнопок.Найти(Стр.ГУИДКнопки,"ГУИДКнопки");
		Если СтрокаОписанияКнопки<>Неопределено Тогда
			Стр.Порядок = ТаблицаПорядкаКнопок.Индекс(СтрокаОписанияКнопки);
		Иначе
			Сообщить("хрень в "+ИмяОбрабатываемогоФайла);
		КонецЕсли;	
	КонецЦикла;	
	
	ТаблицаОписанийКнопокКопия = ТаблицаОписанийКнопок.Скопировать();//сравним
	ТаблицаОписанийКнопокКопия.Сортировать("Порядок");
	МассивЗамен = ТаблицаОписанийКнопокКопия.ВыгрузитьКолонку("ИсходныйТекст");//
	
	//надо только поменять одну колонку в этой таблице
	ТаблицаОписанийКнопок.ЗагрузитьКолонку(МассивЗамен,"ИсходныйТекст");
	
	
	//а потом распаковать обратно.
	
//	СохранитьТекстВФайл(Текст,".ДоПоследнейЗамены");
	
	Текст = СброситьНепонятныйГуид(Текст);
	
	Текст = ВосстановитьЗаменыТекста(Текст,ТаблицаОписанийКнопок);//вернем на места описания кнопок
	
	//СохранитьТекстВФайл(Текст,".Перетасовка_После");
	
	Текст = ВосстановитьЗаменыТекста(Текст,ТаблицаПорядкаКнопок);//вернем список кнопок
	Текст = ВосстановитьЗаменыТекста(Текст,ТаблицаЗаменКавычек);//вернем текст внутри кавычек
	
	Текст = ВосстановитьПовторныеКавычки(Текст);//и кавычки внутри кавычек
	
	Текст = СброситьСчетчикСохранений(Текст);
	Текст = УпорядочитьГуиды(Текст);
	
	//СохранитьТекстВФайл(Текст,".converted");
	СохранитьТекстВФайл(Текст,"");//финал!!!
	
КонецПроцедуры


//Сохраняет строку Текст в файл "ИмяОбрабатываемогоФайла"+ПродолжениеИмени. Использовалось при отладке.
//Кстати, "лишние" файлы в папках с формами 1С никак не мешают в скомпилированной обработке.
Процедура СохранитьТекстВФайл(Текст,ПродолжениеИмени)
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(Текст);
	ТД.Записать(ИмяОбрабатываемогоФайла+ПродолжениеИмени+?(ПродолжениеИмени="","",".txt"),КодировкаТекста.UTF8);
КонецПроцедуры	

//это опционально, удобно для визуального сравнения результата. В боевом режиме лучше выключить.
Функция ВыровнятьТекстыФорм(Знач _Текст)
	
	//для УФ наверняка придется костылять. И для "{}" в подсказках/заголовках  ЭУ.
	
	//делать будем, видимо, так:                              
	//1) Ищем через regexp то, что вложено в кавычках (именно внутри одинарных кавычек! А что насчет тройных??)
	//2) Ищем, есть ли в этом тексте {}
	//3) Если да, то генерим гуид, и вставляем его в текст вместо этого блока. А блок запоминаем. Можно еще перед генерацией гуида проверить, нет ли его уже в тексте.
	//4) Делаем расстановки (да и перестановки тоже).
	//5) Меняем из гуидов обратно.
	
	//и это очень похоже на то, как собираемся менять местами кнопки.
	
	//и теперь видно, что случаи с заменой гуидов
	
	//{6,ГУИД,1,ГУИД, - меняется первый гуид
	//Это  и есть отдельные кнопки на панели.
	//Остается только выстроить их в порядке.
	
	//исходный вариант
	//_Текст = СтрЗаменить(_Текст,"}",Символы.ПС+"}"+Символы.ПС);
	//_Текст = СтрЗаменить(_Текст,"{",Символы.ПС+"{"+Символы.ПС);
	//_Текст = СтрЗаменить(_Текст,Символы.ПС+Символы.ПС,Символы.ПС);//2 CR уберем
	
	_Текст = СтрЗаменить(_Текст,"}",Символы.ПС+"}"+Символы.ПС);
//	_Текст = СтрЗаменить(_Текст,"{",Символы.ПС+"{"+Символы.ПС);
	_Текст = СтрЗаменить(_Текст,Символы.ПС+Символы.ПС,Символы.ПС);//2 CR уберем
	
	ТекущийУровень = 0;
	НовТекст = "";
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(_Текст);
	Для Сч=1 По ТД.КоличествоСтрок() Цикл
		ТекСтрока = ТД.ПолучитьСтроку(Сч);
		
		СтарыйУровень = ТекущийУровень;
		
		КолОткрывающихСкобок = СтрЧислоВхождений(ТекСтрока,"{");
		КолЗакрывающихСкобок = СтрЧислоВхождений(ТекСтрока,"}");
		ТекущийУровень = ТекущийУровень+КолОткрывающихСкобок-КолЗакрывающихСкобок;
		
		Если ТекущийУровень<СтарыйУровень Тогда
			СтарыйУровень =ТекущийУровень;
		КонецЕсли;	
		
		Табы = "";
		Для СчТабов=1 По СтарыйУровень Цикл
			Табы=Табы+Символы.Таб;
		КонецЦикла;	
		
		
		ТД.ЗаменитьСтроку(Сч,Табы+ТекСтрока);
	
	КонецЦикла;
	_Текст = ТД.ПолучитьТекст();
	Возврат _Текст;
КонецФункции


//уберем все кавычки из текста
Функция УбратьПовторныеКавычки(вхСтрока) //изначально было предложено brix8x в комментариях к публикации http://infostart.ru/public/17139/
	
	//{ Получение одной длинной строки
	выхХМЛТело = СтрЗаменить(вхСтрока,СИМВОЛЫ.ПС,"#%");
	выхХМЛТело = СтрЗаменить(выхХМЛТело,СИМВОЛЫ.ВК,"#%");
	//}
	
	//{Решаем проблему с кавычками:
	выхХМЛТело=СтрЗаменить(выхХМЛТело,"""""","^$^$");
	//выхХМЛТело =СтрЗаменить(выхХМЛТело,"""",Символы.ПС+"^$");//а одинарные оставим
	//}
	
	ТекстДок=Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(выхХМЛТело);
	новХМЛТелоДок=Новый ТекстовыйДокумент;
	Максимум=СтрЧислоСтрок(выхХМЛТело);
	
	//{Обрабатываем документ построчно:
	КавычкаОткрыта=истина;
	Для НомерСтроки=1 по Максимум цикл
		КавычкаОткрыта=Не КавычкаОткрыта;
		СтрокаДляВыводаСостояния="Построение XML:           ";
		выхСтрока=ТекстДок.ПолучитьСтроку(НомерСтроки);
		Если КавычкаОткрыта=истина тогда
			
			//{Решаем проблему с получением модуля в управляемой форме
			выхСтрока=СтрЗаменить(выхСтрока,"#%",Символы.ВК);
			//}
			
			новХМЛТелоДок.ДобавитьСтроку(выхСтрока);
			
			Продолжить;
			
		КонецЕсли;
		
		новХМЛТелоДок.ДобавитьСтроку(выхСтрока);
		
	КонецЦикла;
	
	новХМЛТело=новХМЛТелоДок.ПолучитьТекст();
	//}
	Возврат новХМЛТело;
	
КонецФункции

//вернем кавычки на место
Функция ВосстановитьПовторныеКавычки(Текст)
	//{ Восстановление кавычек и переносов строки. А что с УФ, кстати? Там ПС или ВК?
	новХМЛТело=СтрЗаменить(Текст,Символы.ПС+"^$","^$");
	новХМЛТело=СтрЗаменить(новХМЛТело,"^$","""");
	новХМЛТело=СтрЗаменить(новХМЛТело,"#%",""+Символы.ПС);
	//}
		
	Возврат новХМЛТело;
КонецФункции	
	


//Заменяет весь текст, подпадающий под паттерн ШаблонВыражения,
//на текст в виде <ПрефиксЗамены00000123> (8 цифр - пока предполагаю, что этого хватит)
//Возвращает Структуру: НовыйТекст и ТаблицаЗамен
Функция ЗаменитьТекстПоВыражению(Знач Текст,ШаблонВыражения,ПрефиксЗамены,ДоЗакрывающейСкобки = Ложь)
	
	ТаблицаЗамен = Новый ТаблицаЗначений;//фактически словарь, как в архиваторах
	ТаблицаЗамен.Колонки.Добавить("Замена");
	ТаблицаЗамен.Колонки.Добавить("ИсходныйТекст");
	ТаблицаЗамен.Колонки.Добавить("СовпаденияИзРегэкспа");//кэшируем сюда же подстроки из регулярного выражения, 
	
	ТаблицаЗамен.Индексы.Добавить("Замена");
	ТаблицаЗамен.Индексы.Добавить("ИсходныйТекст");
	
	Найденное = ВыполнитьРегулярку(Текст,ШаблонВыражения);
	
	НовыйТекст = "";
	
	Курсор=1;//текущая позиция в тексте
	
	Если ДоЗакрывающейСкобки Тогда
		ПозицииСкобок = ВыполнитьРегулярку(Текст,"[{}]");
		
		//и здесь бы кэшировать
		//может, и иерархию сразу же посчитать?
		//TODO ускорение здесь
		
		//ТабПозицийСкобок = Новый ТаблицаЗначений;
		//ТабПозицийСкобок.Колонки.Добавить("НомерПозиции");//
		//ТабПозицийСкобок.Колонки.Добавить("Символ");// { или }
		
	КонецЕсли;	
	
	Для Каждого Вхождение Из Найденное Цикл
		
		СтрокиЗамены		= ТаблицаЗамен.НайтиСтроки(Новый Структура("ИсходныйТекст",Вхождение.Value));//поищем, была ли уже такая замена
		//да вроде достаточно просто через Найти().
		Если СтрокиЗамены.Количество()=0 Тогда
			
			СтрокаЗамены					= ТаблицаЗамен.Добавить();
			
			Если ДоЗакрывающейСкобки Тогда
				СтрокаЗамены.ИсходныйТекст = НайтиТекстДоЗакрывающейСкобки(Текст, Вхождение.FirstIndex, ПозицииСкобок);
			Иначе	
				СтрокаЗамены.ИсходныйТекст		= Вхождение.Value;
			КонецЕсли;	
			
			СтрокаЗамены.Замена				= "<"+ПрефиксЗамены+Формат(ТаблицаЗамен.Количество(),"ЧЦ=8; ЧВН=; ЧГ=0")+">";//исходный текст будет заменен на этот
			
			СтрокаЗамены.СовпаденияИзРегэкспа = Новый Массив;
			Для Каждого Эл Из Вхождение.SubMatches Цикл
				СтрокаЗамены.СовпаденияИзРегэкспа.Добавить(Эл);//можно кроме нулевого
			КонецЦикла;	
			
		Иначе
			
			СтрокаЗамены = СтрокиЗамены[0];
		КонецЕсли;
		
		//теперь скомпонуем новый текст
		//надо взять часть от старого курсора до начала текущего вхождения, плюс гуид замены
		НовыйТекст = НовыйТекст+Сред(Текст,Курсор,Вхождение.FirstIndex-Курсор+1)+СтрокаЗамены.Замена;
		
		Если Не ДоЗакрывающейСкобки Тогда
			Курсор = Вхождение.FirstIndex+Вхождение.Length+1;//в VBS строки считаются с нуля
		Иначе
			Курсор = Вхождение.FirstIndex+СтрДлина(СтрокаЗамены.ИсходныйТекст)+1;
		КонецЕсли;	
		
	КонецЦикла;	
	
	//и хвост докинем, от последнего совпадения до конца текста
	НовыйТекст = НовыйТекст+Сред(Текст,Курсор,СтрДлина(Текст)-Курсор+1);
	
	Возврат Новый Структура("НовыйТекст,ТаблицаЗамен",НовыйТекст,ТаблицаЗамен);
	
КонецФункции

//возвращает на место то, что было заменено в ЗаменитьТекстПоВыражению 
Функция ВосстановитьЗаменыТекста(Знач Текст,ТаблицаЗамен)
	
	//а теперь в обратную сторону
	Для Каждого СтрокаЗамены Из ТаблицаЗамен Цикл
		Текст = СтрЗаменить(Текст,СтрокаЗамены.Замена,СтрокаЗамены.ИсходныйТекст);
	КонецЦикла;
	
	//Сообщить("Вернули");
	Возврат Текст;
	
КонецФункции



//Упорядочивает гуиды кнопок командных панелей и приводит к виду 00000000-0000-0000-0000-000000000123
//К этому моменту сами описания кнопок в форме уже должны быть упорядочены
Функция УпорядочитьГуиды(Знач _Текст)
	
	ПустойГУИД = "00000000-0000-0000-0000-000000000000";
	ВыражениеГУИД = "(\w{8}-\w{4}-\w{4}-\w{4}-\w{12})";
	
	Найденное = ВыполнитьРегулярку(_Текст,"\{6,"+ВыражениеГУИД+",1,"+ВыражениеГУИД+",",Истина,Истина,Истина);//можно еще определить, что начало/конец строки);
	
	Сч=0;
	Для Каждого НайденныйРезультат из Найденное Цикл 
		Сч=Сч+1;
		
		ГуидКЗамене = Сред(НайденныйРезультат.Value,4,36);//старый гуид
		НовыйГуид = Лев(ПустойГУИД,30)+Формат(Сч,"ЧЦ=6; ЧВН=; ЧГ=0");//соберем новый гуид, с лидирующими нулями и только цифрами в конце

		_Текст = СтрЗаменить(_Текст,ГуидКЗамене,НовыйГуид);
		
	КонецЦикла;
	
	Возврат _Текст;
	
КонецФункции	

//В формах присутствует счетчик сохранений. И он увеличивается даже в том случае, если в форме ничего не меняли.
//Сбросим его.
Функция СброситьСчетчикСохранений(Знач Текст)
	
	//ищем: },483,127,1,0,1,4,4,292}, - меняется последнее число (инкремент?), это счетчик сохранений
	Найденное = ВыполнитьРегулярку(Текст,"\},\d{1,5},\d{1,5},1,0,[01],[14],4,\d{1,5}\},",Истина,Истина,Истина);//последний счетчик от 1 до 5, если будут прецеденты, можно увеличить.
	
	Для Каждого НайденныйРезультат из Найденное Цикл 
		
		_ТекстНаРазбивку = СтрЗаменить(НайденныйРезультат.Value,",",Символы.ПС);
		ДлинаСчетчика = СтрДлина(СтрПолучитьСтроку(_ТекстНаРазбивку,СтрЧислоСтрок(_ТекстНаРазбивку)));//получим длину последней строки - там как раз и лежит счетчик
		
		ТекстЗамены = Лев(НайденныйРезультат.Value,СтрДлина(НайденныйРезультат.Value)-ДлинаСчетчика-1)+"100},";//и поменяем его на "100". Ну просто так.
		Текст = СтрЗаменить(Текст,НайденныйРезультат.Value,ТекстЗамены);
		
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции	

//без комментариев.
Функция СброситьНепонятныйГуид(Знач _Текст)
	
	//4. ищем: (хз что это такое)
	
//	{
//	{10,1,
//	{3,0,	
//	
//	
//	},b78f2e80-ec68-11d4-9dcf-0050bae2bc79,4,2e9d8299-3e8a-4d21-9069-001a1ad97b03,1}


	//блок ниже проверить, если он действительно перекрывается следующим, то выпилить.
	//Выражение = 
	//"\{#%"
	//+"\{10,1,#%"
	//+"\{3,\d,#%"
	//+".*?"
	//+"\},"+ПаттернГуида+",\d,"+ПаттернГуида+",1\}"
	//;
	//
	//Найденное = ВыполнитьРегулярку(_Текст,Выражение,Истина,Истина,Истина);
	//
	//Для Каждого НайденныйРезультат из Найденное Цикл 
	//	_Текст = СтрЗаменить(_Текст,НайденныйРезультат.SubMatches(1),"11000000-0000-0000-0000-000000000000");
	//КонецЦикла;
	
	Выражение = 
//	"\},#%"+
	"\},"+ПаттернГуида+",4,"+ПаттернГуида+",\d{1,2}\}#%"
//	+"\}#%"
	;
	
	Найденное = ВыполнитьРегулярку(_Текст,Выражение,Истина,Истина,Истина);
	
	Для Каждого НайденныйРезультат из Найденное Цикл 
		_Текст = СтрЗаменить(_Текст,НайденныйРезультат.SubMatches(1),"22000000-0000-0000-0000-000000000000");
	КонецЦикла;
	
	Возврат _Текст;
	
	
КонецФункции	

//Упрощенный вызов регэкспа.
Функция ВыполнитьРегулярку(Текст,Выражение,Global=Истина,Multiline=Ложь,IgnoreCase=Истина)
	
	РегулярноеВыражение=Новый COMОбъект("VBScript.RegExp");
	
	РегулярноеВыражение.Multiline	= Multiline;
	РегулярноеВыражение.IgnoreCase	= IgnoreCase;
	РегулярноеВыражение.Global		= Global;
	
	РегулярноеВыражение.Pattern=Выражение;
	
	Найденное = РегулярноеВыражение.Execute(Текст);
	
	Возврат Найденное;
	
КонецФункции	

//Берем Текст, в нем ПерваяПозиция должна быть открывающей скобкой {. 
//Возвращаем текст от этой позиции до закрывающей скобки (с учетом вложенности).
Функция НайтиТекстДоЗакрывающейСкобки(Текст, ПерваяПозиция, ПозицииСкобок)
	
	//TODO: можно нехило ускорить, сейчас занимает около 30-40% времени.
	
	ПоследняяПозиция = 0;
	
	ТекущийУровень = 0;
	
	Для Каждого ПозицияСкобки Из ПозицииСкобок Цикл
		
		Если ПерваяПозиция>ПозицияСкобки.FirstIndex Тогда
			Продолжить;	
		КонецЕсли;	
		
		ТекущаяПозиция = ПозицияСкобки.FirstIndex;
		 
		Если ПозицияСкобки.Value="{" Тогда
			ТекущийУровень = ТекущийУровень+1;
		Иначе
			ТекущийУровень = ТекущийУровень-1;
		КонецЕсли;	
		
		Если ТекущийУровень=0 Тогда
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат Сред(Текст,ПерваяПозиция+1,ТекущаяПозиция-ПерваяПозиция+1);
	
КонецФункции

ПаттернГуида = "(\w{8}-\w{4}-\w{4}-\w{4}-\w{12})";//шаблон гуида в регулярном выражении
